// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"social/ent/friendapply"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// FriendApply is the model entity for the FriendApply schema.
type FriendApply struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// FromID holds the value of the "from_id" field.
	FromID int64 `json:"from_id,omitempty"`
	// ToID holds the value of the "to_id" field.
	ToID int64 `json:"to_id,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"-"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"-"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"-"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FriendApply) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendapply.FieldID, friendapply.FieldFromID, friendapply.FieldToID, friendapply.FieldStatus:
			values[i] = new(sql.NullInt64)
		case friendapply.FieldRemark:
			values[i] = new(sql.NullString)
		case friendapply.FieldCreatedAt, friendapply.FieldUpdatedAt, friendapply.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FriendApply", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FriendApply fields.
func (fa *FriendApply) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendapply.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fa.ID = int64(value.Int64)
		case friendapply.FieldFromID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_id", values[i])
			} else if value.Valid {
				fa.FromID = value.Int64
			}
		case friendapply.FieldToID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_id", values[i])
			} else if value.Valid {
				fa.ToID = value.Int64
			}
		case friendapply.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				fa.Remark = value.String
			}
		case friendapply.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fa.Status = int8(value.Int64)
			}
		case friendapply.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fa.CreatedAt = value.Time
			}
		case friendapply.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fa.UpdatedAt = value.Time
			}
		case friendapply.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fa.DeletedAt = new(time.Time)
				*fa.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FriendApply.
// Note that you need to call FriendApply.Unwrap() before calling this method if this FriendApply
// was returned from a transaction, and the transaction was committed or rolled back.
func (fa *FriendApply) Update() *FriendApplyUpdateOne {
	return (&FriendApplyClient{config: fa.config}).UpdateOne(fa)
}

// Unwrap unwraps the FriendApply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fa *FriendApply) Unwrap() *FriendApply {
	tx, ok := fa.config.driver.(*txDriver)
	if !ok {
		panic("ent: FriendApply is not a transactional entity")
	}
	fa.config.driver = tx.drv
	return fa
}

// String implements the fmt.Stringer.
func (fa *FriendApply) String() string {
	var builder strings.Builder
	builder.WriteString("FriendApply(")
	builder.WriteString(fmt.Sprintf("id=%v", fa.ID))
	builder.WriteString(", from_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.FromID))
	builder.WriteString(", to_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.ToID))
	builder.WriteString(", remark=")
	builder.WriteString(fa.Remark)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", fa.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(fa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(fa.UpdatedAt.Format(time.ANSIC))
	if v := fa.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FriendApplies is a parsable slice of FriendApply.
type FriendApplies []*FriendApply

func (fa FriendApplies) config(cfg config) {
	for _i := range fa {
		fa[_i].config = cfg
	}
}
