// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"social/ent/friendapply"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FriendApplyCreate is the builder for creating a FriendApply entity.
type FriendApplyCreate struct {
	config
	mutation *FriendApplyMutation
	hooks    []Hook
}

// SetFromID sets the "from_id" field.
func (fac *FriendApplyCreate) SetFromID(i int64) *FriendApplyCreate {
	fac.mutation.SetFromID(i)
	return fac
}

// SetToID sets the "to_id" field.
func (fac *FriendApplyCreate) SetToID(i int64) *FriendApplyCreate {
	fac.mutation.SetToID(i)
	return fac
}

// SetRemark sets the "remark" field.
func (fac *FriendApplyCreate) SetRemark(s string) *FriendApplyCreate {
	fac.mutation.SetRemark(s)
	return fac
}

// SetStatus sets the "status" field.
func (fac *FriendApplyCreate) SetStatus(i int8) *FriendApplyCreate {
	fac.mutation.SetStatus(i)
	return fac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fac *FriendApplyCreate) SetNillableStatus(i *int8) *FriendApplyCreate {
	if i != nil {
		fac.SetStatus(*i)
	}
	return fac
}

// SetCreatedAt sets the "created_at" field.
func (fac *FriendApplyCreate) SetCreatedAt(t time.Time) *FriendApplyCreate {
	fac.mutation.SetCreatedAt(t)
	return fac
}

// SetUpdatedAt sets the "updated_at" field.
func (fac *FriendApplyCreate) SetUpdatedAt(t time.Time) *FriendApplyCreate {
	fac.mutation.SetUpdatedAt(t)
	return fac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fac *FriendApplyCreate) SetNillableUpdatedAt(t *time.Time) *FriendApplyCreate {
	if t != nil {
		fac.SetUpdatedAt(*t)
	}
	return fac
}

// SetDeletedAt sets the "deleted_at" field.
func (fac *FriendApplyCreate) SetDeletedAt(t time.Time) *FriendApplyCreate {
	fac.mutation.SetDeletedAt(t)
	return fac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fac *FriendApplyCreate) SetNillableDeletedAt(t *time.Time) *FriendApplyCreate {
	if t != nil {
		fac.SetDeletedAt(*t)
	}
	return fac
}

// SetID sets the "id" field.
func (fac *FriendApplyCreate) SetID(i int64) *FriendApplyCreate {
	fac.mutation.SetID(i)
	return fac
}

// Mutation returns the FriendApplyMutation object of the builder.
func (fac *FriendApplyCreate) Mutation() *FriendApplyMutation {
	return fac.mutation
}

// Save creates the FriendApply in the database.
func (fac *FriendApplyCreate) Save(ctx context.Context) (*FriendApply, error) {
	var (
		err  error
		node *FriendApply
	)
	if len(fac.hooks) == 0 {
		if err = fac.check(); err != nil {
			return nil, err
		}
		node, err = fac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FriendApplyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fac.check(); err != nil {
				return nil, err
			}
			fac.mutation = mutation
			if node, err = fac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fac.hooks) - 1; i >= 0; i-- {
			if fac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fac *FriendApplyCreate) SaveX(ctx context.Context) *FriendApply {
	v, err := fac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fac *FriendApplyCreate) Exec(ctx context.Context) error {
	_, err := fac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fac *FriendApplyCreate) ExecX(ctx context.Context) {
	if err := fac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fac *FriendApplyCreate) check() error {
	if _, ok := fac.mutation.FromID(); !ok {
		return &ValidationError{Name: "from_id", err: errors.New(`ent: missing required field "FriendApply.from_id"`)}
	}
	if _, ok := fac.mutation.ToID(); !ok {
		return &ValidationError{Name: "to_id", err: errors.New(`ent: missing required field "FriendApply.to_id"`)}
	}
	if _, ok := fac.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "FriendApply.remark"`)}
	}
	if _, ok := fac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FriendApply.created_at"`)}
	}
	return nil
}

func (fac *FriendApplyCreate) sqlSave(ctx context.Context) (*FriendApply, error) {
	_node, _spec := fac.createSpec()
	if err := sqlgraph.CreateNode(ctx, fac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (fac *FriendApplyCreate) createSpec() (*FriendApply, *sqlgraph.CreateSpec) {
	var (
		_node = &FriendApply{config: fac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: friendapply.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: friendapply.FieldID,
			},
		}
	)
	if id, ok := fac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fac.mutation.FromID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: friendapply.FieldFromID,
		})
		_node.FromID = value
	}
	if value, ok := fac.mutation.ToID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: friendapply.FieldToID,
		})
		_node.ToID = value
	}
	if value, ok := fac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: friendapply.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := fac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: friendapply.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := fac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: friendapply.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: friendapply.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: friendapply.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// FriendApplyCreateBulk is the builder for creating many FriendApply entities in bulk.
type FriendApplyCreateBulk struct {
	config
	builders []*FriendApplyCreate
}

// Save creates the FriendApply entities in the database.
func (facb *FriendApplyCreateBulk) Save(ctx context.Context) ([]*FriendApply, error) {
	specs := make([]*sqlgraph.CreateSpec, len(facb.builders))
	nodes := make([]*FriendApply, len(facb.builders))
	mutators := make([]Mutator, len(facb.builders))
	for i := range facb.builders {
		func(i int, root context.Context) {
			builder := facb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FriendApplyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, facb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, facb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, facb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (facb *FriendApplyCreateBulk) SaveX(ctx context.Context) []*FriendApply {
	v, err := facb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (facb *FriendApplyCreateBulk) Exec(ctx context.Context) error {
	_, err := facb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (facb *FriendApplyCreateBulk) ExecX(ctx context.Context) {
	if err := facb.Exec(ctx); err != nil {
		panic(err)
	}
}
