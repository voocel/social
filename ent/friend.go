// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"social/ent/friend"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Friend is the model entity for the Friend schema.
type Friend struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID int64 `json:"uid,omitempty"`
	// FriendID holds the value of the "friend_id" field.
	FriendID int64 `json:"friend_id,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Shield holds the value of the "shield" field.
	Shield int8 `json:"shield,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"-"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"-"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"-"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Friend) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case friend.FieldID, friend.FieldUID, friend.FieldFriendID, friend.FieldShield:
			values[i] = new(sql.NullInt64)
		case friend.FieldRemark:
			values[i] = new(sql.NullString)
		case friend.FieldCreatedAt, friend.FieldUpdatedAt, friend.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Friend", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Friend fields.
func (f *Friend) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int64(value.Int64)
		case friend.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				f.UID = value.Int64
			}
		case friend.FieldFriendID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field friend_id", values[i])
			} else if value.Valid {
				f.FriendID = value.Int64
			}
		case friend.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				f.Remark = value.String
			}
		case friend.FieldShield:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shield", values[i])
			} else if value.Valid {
				f.Shield = int8(value.Int64)
			}
		case friend.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case friend.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case friend.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = new(time.Time)
				*f.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Friend.
// Note that you need to call Friend.Unwrap() before calling this method if this Friend
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Friend) Update() *FriendUpdateOne {
	return (&FriendClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Friend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Friend) Unwrap() *Friend {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Friend is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Friend) String() string {
	var builder strings.Builder
	builder.WriteString("Friend(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", uid=")
	builder.WriteString(fmt.Sprintf("%v", f.UID))
	builder.WriteString(", friend_id=")
	builder.WriteString(fmt.Sprintf("%v", f.FriendID))
	builder.WriteString(", remark=")
	builder.WriteString(f.Remark)
	builder.WriteString(", shield=")
	builder.WriteString(fmt.Sprintf("%v", f.Shield))
	builder.WriteString(", created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	if v := f.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Friends is a parsable slice of Friend.
type Friends []*Friend

func (f Friends) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
