// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"social/ent/groupmember"
	"social/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupMemberUpdate is the builder for updating GroupMember entities.
type GroupMemberUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMemberMutation
}

// Where appends a list predicates to the GroupMemberUpdate builder.
func (gmu *GroupMemberUpdate) Where(ps ...predicate.GroupMember) *GroupMemberUpdate {
	gmu.mutation.Where(ps...)
	return gmu
}

// SetUID sets the "uid" field.
func (gmu *GroupMemberUpdate) SetUID(i int64) *GroupMemberUpdate {
	gmu.mutation.ResetUID()
	gmu.mutation.SetUID(i)
	return gmu
}

// AddUID adds i to the "uid" field.
func (gmu *GroupMemberUpdate) AddUID(i int64) *GroupMemberUpdate {
	gmu.mutation.AddUID(i)
	return gmu
}

// SetGroupID sets the "group_id" field.
func (gmu *GroupMemberUpdate) SetGroupID(i int64) *GroupMemberUpdate {
	gmu.mutation.ResetGroupID()
	gmu.mutation.SetGroupID(i)
	return gmu
}

// AddGroupID adds i to the "group_id" field.
func (gmu *GroupMemberUpdate) AddGroupID(i int64) *GroupMemberUpdate {
	gmu.mutation.AddGroupID(i)
	return gmu
}

// SetInviter sets the "inviter" field.
func (gmu *GroupMemberUpdate) SetInviter(i int64) *GroupMemberUpdate {
	gmu.mutation.ResetInviter()
	gmu.mutation.SetInviter(i)
	return gmu
}

// SetNillableInviter sets the "inviter" field if the given value is not nil.
func (gmu *GroupMemberUpdate) SetNillableInviter(i *int64) *GroupMemberUpdate {
	if i != nil {
		gmu.SetInviter(*i)
	}
	return gmu
}

// AddInviter adds i to the "inviter" field.
func (gmu *GroupMemberUpdate) AddInviter(i int64) *GroupMemberUpdate {
	gmu.mutation.AddInviter(i)
	return gmu
}

// SetRemark sets the "remark" field.
func (gmu *GroupMemberUpdate) SetRemark(s string) *GroupMemberUpdate {
	gmu.mutation.SetRemark(s)
	return gmu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (gmu *GroupMemberUpdate) SetNillableRemark(s *string) *GroupMemberUpdate {
	if s != nil {
		gmu.SetRemark(*s)
	}
	return gmu
}

// SetStatus sets the "status" field.
func (gmu *GroupMemberUpdate) SetStatus(i int8) *GroupMemberUpdate {
	gmu.mutation.ResetStatus()
	gmu.mutation.SetStatus(i)
	return gmu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gmu *GroupMemberUpdate) SetNillableStatus(i *int8) *GroupMemberUpdate {
	if i != nil {
		gmu.SetStatus(*i)
	}
	return gmu
}

// AddStatus adds i to the "status" field.
func (gmu *GroupMemberUpdate) AddStatus(i int8) *GroupMemberUpdate {
	gmu.mutation.AddStatus(i)
	return gmu
}

// SetApplyAt sets the "apply_at" field.
func (gmu *GroupMemberUpdate) SetApplyAt(t time.Time) *GroupMemberUpdate {
	gmu.mutation.SetApplyAt(t)
	return gmu
}

// SetNillableApplyAt sets the "apply_at" field if the given value is not nil.
func (gmu *GroupMemberUpdate) SetNillableApplyAt(t *time.Time) *GroupMemberUpdate {
	if t != nil {
		gmu.SetApplyAt(*t)
	}
	return gmu
}

// ClearApplyAt clears the value of the "apply_at" field.
func (gmu *GroupMemberUpdate) ClearApplyAt() *GroupMemberUpdate {
	gmu.mutation.ClearApplyAt()
	return gmu
}

// SetCreatedAt sets the "created_at" field.
func (gmu *GroupMemberUpdate) SetCreatedAt(t time.Time) *GroupMemberUpdate {
	gmu.mutation.SetCreatedAt(t)
	return gmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmu *GroupMemberUpdate) SetNillableCreatedAt(t *time.Time) *GroupMemberUpdate {
	if t != nil {
		gmu.SetCreatedAt(*t)
	}
	return gmu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (gmu *GroupMemberUpdate) ClearCreatedAt() *GroupMemberUpdate {
	gmu.mutation.ClearCreatedAt()
	return gmu
}

// SetUpdatedAt sets the "updated_at" field.
func (gmu *GroupMemberUpdate) SetUpdatedAt(t time.Time) *GroupMemberUpdate {
	gmu.mutation.SetUpdatedAt(t)
	return gmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gmu *GroupMemberUpdate) SetNillableUpdatedAt(t *time.Time) *GroupMemberUpdate {
	if t != nil {
		gmu.SetUpdatedAt(*t)
	}
	return gmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gmu *GroupMemberUpdate) ClearUpdatedAt() *GroupMemberUpdate {
	gmu.mutation.ClearUpdatedAt()
	return gmu
}

// SetDeletedAt sets the "deleted_at" field.
func (gmu *GroupMemberUpdate) SetDeletedAt(t time.Time) *GroupMemberUpdate {
	gmu.mutation.SetDeletedAt(t)
	return gmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmu *GroupMemberUpdate) SetNillableDeletedAt(t *time.Time) *GroupMemberUpdate {
	if t != nil {
		gmu.SetDeletedAt(*t)
	}
	return gmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gmu *GroupMemberUpdate) ClearDeletedAt() *GroupMemberUpdate {
	gmu.mutation.ClearDeletedAt()
	return gmu
}

// Mutation returns the GroupMemberMutation object of the builder.
func (gmu *GroupMemberUpdate) Mutation() *GroupMemberMutation {
	return gmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gmu *GroupMemberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gmu.hooks) == 0 {
		affected, err = gmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmu.mutation = mutation
			affected, err = gmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gmu.hooks) - 1; i >= 0; i-- {
			if gmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmu *GroupMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := gmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gmu *GroupMemberUpdate) Exec(ctx context.Context) error {
	_, err := gmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmu *GroupMemberUpdate) ExecX(ctx context.Context) {
	if err := gmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmu *GroupMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupmember.Table,
			Columns: groupmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: groupmember.FieldID,
			},
		},
	}
	if ps := gmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmu.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldUID,
		})
	}
	if value, ok := gmu.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldUID,
		})
	}
	if value, ok := gmu.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldGroupID,
		})
	}
	if value, ok := gmu.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldGroupID,
		})
	}
	if value, ok := gmu.mutation.Inviter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldInviter,
		})
	}
	if value, ok := gmu.mutation.AddedInviter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldInviter,
		})
	}
	if value, ok := gmu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmember.FieldRemark,
		})
	}
	if value, ok := gmu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: groupmember.FieldStatus,
		})
	}
	if value, ok := gmu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: groupmember.FieldStatus,
		})
	}
	if value, ok := gmu.mutation.ApplyAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmember.FieldApplyAt,
		})
	}
	if gmu.mutation.ApplyAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupmember.FieldApplyAt,
		})
	}
	if value, ok := gmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmember.FieldCreatedAt,
		})
	}
	if gmu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupmember.FieldCreatedAt,
		})
	}
	if value, ok := gmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmember.FieldUpdatedAt,
		})
	}
	if gmu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupmember.FieldUpdatedAt,
		})
	}
	if value, ok := gmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmember.FieldDeletedAt,
		})
	}
	if gmu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupmember.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GroupMemberUpdateOne is the builder for updating a single GroupMember entity.
type GroupMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMemberMutation
}

// SetUID sets the "uid" field.
func (gmuo *GroupMemberUpdateOne) SetUID(i int64) *GroupMemberUpdateOne {
	gmuo.mutation.ResetUID()
	gmuo.mutation.SetUID(i)
	return gmuo
}

// AddUID adds i to the "uid" field.
func (gmuo *GroupMemberUpdateOne) AddUID(i int64) *GroupMemberUpdateOne {
	gmuo.mutation.AddUID(i)
	return gmuo
}

// SetGroupID sets the "group_id" field.
func (gmuo *GroupMemberUpdateOne) SetGroupID(i int64) *GroupMemberUpdateOne {
	gmuo.mutation.ResetGroupID()
	gmuo.mutation.SetGroupID(i)
	return gmuo
}

// AddGroupID adds i to the "group_id" field.
func (gmuo *GroupMemberUpdateOne) AddGroupID(i int64) *GroupMemberUpdateOne {
	gmuo.mutation.AddGroupID(i)
	return gmuo
}

// SetInviter sets the "inviter" field.
func (gmuo *GroupMemberUpdateOne) SetInviter(i int64) *GroupMemberUpdateOne {
	gmuo.mutation.ResetInviter()
	gmuo.mutation.SetInviter(i)
	return gmuo
}

// SetNillableInviter sets the "inviter" field if the given value is not nil.
func (gmuo *GroupMemberUpdateOne) SetNillableInviter(i *int64) *GroupMemberUpdateOne {
	if i != nil {
		gmuo.SetInviter(*i)
	}
	return gmuo
}

// AddInviter adds i to the "inviter" field.
func (gmuo *GroupMemberUpdateOne) AddInviter(i int64) *GroupMemberUpdateOne {
	gmuo.mutation.AddInviter(i)
	return gmuo
}

// SetRemark sets the "remark" field.
func (gmuo *GroupMemberUpdateOne) SetRemark(s string) *GroupMemberUpdateOne {
	gmuo.mutation.SetRemark(s)
	return gmuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (gmuo *GroupMemberUpdateOne) SetNillableRemark(s *string) *GroupMemberUpdateOne {
	if s != nil {
		gmuo.SetRemark(*s)
	}
	return gmuo
}

// SetStatus sets the "status" field.
func (gmuo *GroupMemberUpdateOne) SetStatus(i int8) *GroupMemberUpdateOne {
	gmuo.mutation.ResetStatus()
	gmuo.mutation.SetStatus(i)
	return gmuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gmuo *GroupMemberUpdateOne) SetNillableStatus(i *int8) *GroupMemberUpdateOne {
	if i != nil {
		gmuo.SetStatus(*i)
	}
	return gmuo
}

// AddStatus adds i to the "status" field.
func (gmuo *GroupMemberUpdateOne) AddStatus(i int8) *GroupMemberUpdateOne {
	gmuo.mutation.AddStatus(i)
	return gmuo
}

// SetApplyAt sets the "apply_at" field.
func (gmuo *GroupMemberUpdateOne) SetApplyAt(t time.Time) *GroupMemberUpdateOne {
	gmuo.mutation.SetApplyAt(t)
	return gmuo
}

// SetNillableApplyAt sets the "apply_at" field if the given value is not nil.
func (gmuo *GroupMemberUpdateOne) SetNillableApplyAt(t *time.Time) *GroupMemberUpdateOne {
	if t != nil {
		gmuo.SetApplyAt(*t)
	}
	return gmuo
}

// ClearApplyAt clears the value of the "apply_at" field.
func (gmuo *GroupMemberUpdateOne) ClearApplyAt() *GroupMemberUpdateOne {
	gmuo.mutation.ClearApplyAt()
	return gmuo
}

// SetCreatedAt sets the "created_at" field.
func (gmuo *GroupMemberUpdateOne) SetCreatedAt(t time.Time) *GroupMemberUpdateOne {
	gmuo.mutation.SetCreatedAt(t)
	return gmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmuo *GroupMemberUpdateOne) SetNillableCreatedAt(t *time.Time) *GroupMemberUpdateOne {
	if t != nil {
		gmuo.SetCreatedAt(*t)
	}
	return gmuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (gmuo *GroupMemberUpdateOne) ClearCreatedAt() *GroupMemberUpdateOne {
	gmuo.mutation.ClearCreatedAt()
	return gmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (gmuo *GroupMemberUpdateOne) SetUpdatedAt(t time.Time) *GroupMemberUpdateOne {
	gmuo.mutation.SetUpdatedAt(t)
	return gmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gmuo *GroupMemberUpdateOne) SetNillableUpdatedAt(t *time.Time) *GroupMemberUpdateOne {
	if t != nil {
		gmuo.SetUpdatedAt(*t)
	}
	return gmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gmuo *GroupMemberUpdateOne) ClearUpdatedAt() *GroupMemberUpdateOne {
	gmuo.mutation.ClearUpdatedAt()
	return gmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gmuo *GroupMemberUpdateOne) SetDeletedAt(t time.Time) *GroupMemberUpdateOne {
	gmuo.mutation.SetDeletedAt(t)
	return gmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmuo *GroupMemberUpdateOne) SetNillableDeletedAt(t *time.Time) *GroupMemberUpdateOne {
	if t != nil {
		gmuo.SetDeletedAt(*t)
	}
	return gmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gmuo *GroupMemberUpdateOne) ClearDeletedAt() *GroupMemberUpdateOne {
	gmuo.mutation.ClearDeletedAt()
	return gmuo
}

// Mutation returns the GroupMemberMutation object of the builder.
func (gmuo *GroupMemberUpdateOne) Mutation() *GroupMemberMutation {
	return gmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gmuo *GroupMemberUpdateOne) Select(field string, fields ...string) *GroupMemberUpdateOne {
	gmuo.fields = append([]string{field}, fields...)
	return gmuo
}

// Save executes the query and returns the updated GroupMember entity.
func (gmuo *GroupMemberUpdateOne) Save(ctx context.Context) (*GroupMember, error) {
	var (
		err  error
		node *GroupMember
	)
	if len(gmuo.hooks) == 0 {
		node, err = gmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmuo.mutation = mutation
			node, err = gmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gmuo.hooks) - 1; i >= 0; i-- {
			if gmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmuo *GroupMemberUpdateOne) SaveX(ctx context.Context) *GroupMember {
	node, err := gmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gmuo *GroupMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := gmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmuo *GroupMemberUpdateOne) ExecX(ctx context.Context) {
	if err := gmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmuo *GroupMemberUpdateOne) sqlSave(ctx context.Context) (_node *GroupMember, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupmember.Table,
			Columns: groupmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: groupmember.FieldID,
			},
		},
	}
	id, ok := gmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupmember.FieldID)
		for _, f := range fields {
			if !groupmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmuo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldUID,
		})
	}
	if value, ok := gmuo.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldUID,
		})
	}
	if value, ok := gmuo.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldGroupID,
		})
	}
	if value, ok := gmuo.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldGroupID,
		})
	}
	if value, ok := gmuo.mutation.Inviter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldInviter,
		})
	}
	if value, ok := gmuo.mutation.AddedInviter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: groupmember.FieldInviter,
		})
	}
	if value, ok := gmuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmember.FieldRemark,
		})
	}
	if value, ok := gmuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: groupmember.FieldStatus,
		})
	}
	if value, ok := gmuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: groupmember.FieldStatus,
		})
	}
	if value, ok := gmuo.mutation.ApplyAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmember.FieldApplyAt,
		})
	}
	if gmuo.mutation.ApplyAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupmember.FieldApplyAt,
		})
	}
	if value, ok := gmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmember.FieldCreatedAt,
		})
	}
	if gmuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupmember.FieldCreatedAt,
		})
	}
	if value, ok := gmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmember.FieldUpdatedAt,
		})
	}
	if gmuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupmember.FieldUpdatedAt,
		})
	}
	if value, ok := gmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmember.FieldDeletedAt,
		})
	}
	if gmuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupmember.FieldDeletedAt,
		})
	}
	_node = &GroupMember{config: gmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
