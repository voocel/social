// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"social/ent/group"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupCreate is the builder for creating a Group entity.
type GroupCreate struct {
	config
	mutation *GroupMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (gc *GroupCreate) SetName(s string) *GroupCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetOwner sets the "owner" field.
func (gc *GroupCreate) SetOwner(i int64) *GroupCreate {
	gc.mutation.SetOwner(i)
	return gc
}

// SetAvatar sets the "avatar" field.
func (gc *GroupCreate) SetAvatar(s string) *GroupCreate {
	gc.mutation.SetAvatar(s)
	return gc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (gc *GroupCreate) SetNillableAvatar(s *string) *GroupCreate {
	if s != nil {
		gc.SetAvatar(*s)
	}
	return gc
}

// SetCreatedUID sets the "created_uid" field.
func (gc *GroupCreate) SetCreatedUID(i int64) *GroupCreate {
	gc.mutation.SetCreatedUID(i)
	return gc
}

// SetMaxMembers sets the "max_members" field.
func (gc *GroupCreate) SetMaxMembers(i int) *GroupCreate {
	gc.mutation.SetMaxMembers(i)
	return gc
}

// SetNillableMaxMembers sets the "max_members" field if the given value is not nil.
func (gc *GroupCreate) SetNillableMaxMembers(i *int) *GroupCreate {
	if i != nil {
		gc.SetMaxMembers(*i)
	}
	return gc
}

// SetMode sets the "mode" field.
func (gc *GroupCreate) SetMode(i int8) *GroupCreate {
	gc.mutation.SetMode(i)
	return gc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (gc *GroupCreate) SetNillableMode(i *int8) *GroupCreate {
	if i != nil {
		gc.SetMode(*i)
	}
	return gc
}

// SetType sets the "type" field.
func (gc *GroupCreate) SetType(i int8) *GroupCreate {
	gc.mutation.SetType(i)
	return gc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gc *GroupCreate) SetNillableType(i *int8) *GroupCreate {
	if i != nil {
		gc.SetType(*i)
	}
	return gc
}

// SetStatus sets the "status" field.
func (gc *GroupCreate) SetStatus(i int8) *GroupCreate {
	gc.mutation.SetStatus(i)
	return gc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gc *GroupCreate) SetNillableStatus(i *int8) *GroupCreate {
	if i != nil {
		gc.SetStatus(*i)
	}
	return gc
}

// SetInviteMode sets the "invite_mode" field.
func (gc *GroupCreate) SetInviteMode(i int8) *GroupCreate {
	gc.mutation.SetInviteMode(i)
	return gc
}

// SetNillableInviteMode sets the "invite_mode" field if the given value is not nil.
func (gc *GroupCreate) SetNillableInviteMode(i *int8) *GroupCreate {
	if i != nil {
		gc.SetInviteMode(*i)
	}
	return gc
}

// SetNotice sets the "notice" field.
func (gc *GroupCreate) SetNotice(s string) *GroupCreate {
	gc.mutation.SetNotice(s)
	return gc
}

// SetNillableNotice sets the "notice" field if the given value is not nil.
func (gc *GroupCreate) SetNillableNotice(s *string) *GroupCreate {
	if s != nil {
		gc.SetNotice(*s)
	}
	return gc
}

// SetIntroduction sets the "introduction" field.
func (gc *GroupCreate) SetIntroduction(s string) *GroupCreate {
	gc.mutation.SetIntroduction(s)
	return gc
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (gc *GroupCreate) SetNillableIntroduction(s *string) *GroupCreate {
	if s != nil {
		gc.SetIntroduction(*s)
	}
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GroupCreate) SetCreatedAt(t time.Time) *GroupCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GroupCreate) SetNillableCreatedAt(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GroupCreate) SetUpdatedAt(t time.Time) *GroupCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GroupCreate) SetNillableUpdatedAt(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetDeletedAt sets the "deleted_at" field.
func (gc *GroupCreate) SetDeletedAt(t time.Time) *GroupCreate {
	gc.mutation.SetDeletedAt(t)
	return gc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gc *GroupCreate) SetNillableDeletedAt(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetDeletedAt(*t)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GroupCreate) SetID(i int64) *GroupCreate {
	gc.mutation.SetID(i)
	return gc
}

// Mutation returns the GroupMutation object of the builder.
func (gc *GroupCreate) Mutation() *GroupMutation {
	return gc.mutation
}

// Save creates the Group in the database.
func (gc *GroupCreate) Save(ctx context.Context) (*Group, error) {
	var (
		err  error
		node *Group
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroupCreate) SaveX(ctx context.Context) *Group {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroupCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroupCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GroupCreate) defaults() {
	if _, ok := gc.mutation.Avatar(); !ok {
		v := group.DefaultAvatar
		gc.mutation.SetAvatar(v)
	}
	if _, ok := gc.mutation.MaxMembers(); !ok {
		v := group.DefaultMaxMembers
		gc.mutation.SetMaxMembers(v)
	}
	if _, ok := gc.mutation.Mode(); !ok {
		v := group.DefaultMode
		gc.mutation.SetMode(v)
	}
	if _, ok := gc.mutation.GetType(); !ok {
		v := group.DefaultType
		gc.mutation.SetType(v)
	}
	if _, ok := gc.mutation.Status(); !ok {
		v := group.DefaultStatus
		gc.mutation.SetStatus(v)
	}
	if _, ok := gc.mutation.InviteMode(); !ok {
		v := group.DefaultInviteMode
		gc.mutation.SetInviteMode(v)
	}
	if _, ok := gc.mutation.Notice(); !ok {
		v := group.DefaultNotice
		gc.mutation.SetNotice(v)
	}
	if _, ok := gc.mutation.Introduction(); !ok {
		v := group.DefaultIntroduction
		gc.mutation.SetIntroduction(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroupCreate) check() error {
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Group.name"`)}
	}
	if _, ok := gc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Group.owner"`)}
	}
	if _, ok := gc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "Group.avatar"`)}
	}
	if _, ok := gc.mutation.CreatedUID(); !ok {
		return &ValidationError{Name: "created_uid", err: errors.New(`ent: missing required field "Group.created_uid"`)}
	}
	if _, ok := gc.mutation.MaxMembers(); !ok {
		return &ValidationError{Name: "max_members", err: errors.New(`ent: missing required field "Group.max_members"`)}
	}
	if _, ok := gc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "Group.mode"`)}
	}
	if _, ok := gc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Group.type"`)}
	}
	if _, ok := gc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Group.status"`)}
	}
	if _, ok := gc.mutation.InviteMode(); !ok {
		return &ValidationError{Name: "invite_mode", err: errors.New(`ent: missing required field "Group.invite_mode"`)}
	}
	if _, ok := gc.mutation.Notice(); !ok {
		return &ValidationError{Name: "notice", err: errors.New(`ent: missing required field "Group.notice"`)}
	}
	if _, ok := gc.mutation.Introduction(); !ok {
		return &ValidationError{Name: "introduction", err: errors.New(`ent: missing required field "Group.introduction"`)}
	}
	return nil
}

func (gc *GroupCreate) sqlSave(ctx context.Context) (*Group, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (gc *GroupCreate) createSpec() (*Group, *sqlgraph.CreateSpec) {
	var (
		_node = &Group{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: group.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: group.FieldID,
			},
		}
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldName,
		})
		_node.Name = value
	}
	if value, ok := gc.mutation.Owner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: group.FieldOwner,
		})
		_node.Owner = value
	}
	if value, ok := gc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := gc.mutation.CreatedUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: group.FieldCreatedUID,
		})
		_node.CreatedUID = value
	}
	if value, ok := gc.mutation.MaxMembers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: group.FieldMaxMembers,
		})
		_node.MaxMembers = value
	}
	if value, ok := gc.mutation.Mode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: group.FieldMode,
		})
		_node.Mode = value
	}
	if value, ok := gc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: group.FieldType,
		})
		_node.Type = value
	}
	if value, ok := gc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: group.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := gc.mutation.InviteMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: group.FieldInviteMode,
		})
		_node.InviteMode = value
	}
	if value, ok := gc.mutation.Notice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldNotice,
		})
		_node.Notice = value
	}
	if value, ok := gc.mutation.Introduction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldIntroduction,
		})
		_node.Introduction = value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// GroupCreateBulk is the builder for creating many Group entities in bulk.
type GroupCreateBulk struct {
	config
	builders []*GroupCreate
}

// Save creates the Group entities in the database.
func (gcb *GroupCreateBulk) Save(ctx context.Context) ([]*Group, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Group, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroupCreateBulk) SaveX(ctx context.Context) []*Group {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroupCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroupCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
