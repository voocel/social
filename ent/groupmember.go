// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"social/ent/groupmember"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// GroupMember is the model entity for the GroupMember schema.
type GroupMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID int64 `json:"uid,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int64 `json:"group_id,omitempty"`
	// Inviter holds the value of the "inviter" field.
	Inviter int64 `json:"inviter,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// ApplyAt holds the value of the "apply_at" field.
	ApplyAt time.Time `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"-"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"-"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"-"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupMember) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupmember.FieldID, groupmember.FieldUID, groupmember.FieldGroupID, groupmember.FieldInviter, groupmember.FieldStatus:
			values[i] = new(sql.NullInt64)
		case groupmember.FieldRemark:
			values[i] = new(sql.NullString)
		case groupmember.FieldApplyAt, groupmember.FieldCreatedAt, groupmember.FieldUpdatedAt, groupmember.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GroupMember", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupMember fields.
func (gm *GroupMember) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gm.ID = int64(value.Int64)
		case groupmember.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				gm.UID = value.Int64
			}
		case groupmember.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				gm.GroupID = value.Int64
			}
		case groupmember.FieldInviter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inviter", values[i])
			} else if value.Valid {
				gm.Inviter = value.Int64
			}
		case groupmember.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				gm.Remark = value.String
			}
		case groupmember.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				gm.Status = int8(value.Int64)
			}
		case groupmember.FieldApplyAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field apply_at", values[i])
			} else if value.Valid {
				gm.ApplyAt = value.Time
			}
		case groupmember.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gm.CreatedAt = value.Time
			}
		case groupmember.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gm.UpdatedAt = value.Time
			}
		case groupmember.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gm.DeletedAt = new(time.Time)
				*gm.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GroupMember.
// Note that you need to call GroupMember.Unwrap() before calling this method if this GroupMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (gm *GroupMember) Update() *GroupMemberUpdateOne {
	return (&GroupMemberClient{config: gm.config}).UpdateOne(gm)
}

// Unwrap unwraps the GroupMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gm *GroupMember) Unwrap() *GroupMember {
	tx, ok := gm.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupMember is not a transactional entity")
	}
	gm.config.driver = tx.drv
	return gm
}

// String implements the fmt.Stringer.
func (gm *GroupMember) String() string {
	var builder strings.Builder
	builder.WriteString("GroupMember(")
	builder.WriteString(fmt.Sprintf("id=%v", gm.ID))
	builder.WriteString(", uid=")
	builder.WriteString(fmt.Sprintf("%v", gm.UID))
	builder.WriteString(", group_id=")
	builder.WriteString(fmt.Sprintf("%v", gm.GroupID))
	builder.WriteString(", inviter=")
	builder.WriteString(fmt.Sprintf("%v", gm.Inviter))
	builder.WriteString(", remark=")
	builder.WriteString(gm.Remark)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", gm.Status))
	builder.WriteString(", apply_at=")
	builder.WriteString(gm.ApplyAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(gm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gm.UpdatedAt.Format(time.ANSIC))
	if v := gm.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// GroupMembers is a parsable slice of GroupMember.
type GroupMembers []*GroupMember

func (gm GroupMembers) config(cfg config) {
	for _i := range gm {
		gm[_i].config = cfg
	}
}
