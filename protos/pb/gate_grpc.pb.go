// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: gate.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gate_Bind_FullMethodName      = "/pb.Gate/Bind"
	Gate_Unbind_FullMethodName    = "/pb.Gate/Unbind"
	Gate_GetIP_FullMethodName     = "/pb.Gate/GetIP"
	Gate_Push_FullMethodName      = "/pb.Gate/Push"
	Gate_Multicast_FullMethodName = "/pb.Gate/Multicast"
	Gate_Broadcast_FullMethodName = "/pb.Gate/Broadcast"
)

// GateClient is the client API for Gate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateClient interface {
	// 绑定用户与连接
	Bind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindReply, error)
	// 解绑用户与连接
	Unbind(ctx context.Context, in *UnbindReq, opts ...grpc.CallOption) (*UnbindReply, error)
	// 获取客户端IP
	GetIP(ctx context.Context, in *GetIPReq, opts ...grpc.CallOption) (*GetIPReply, error)
	// 推送消息
	Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushReply, error)
	// 推送组消息
	Multicast(ctx context.Context, in *MulticastReq, opts ...grpc.CallOption) (*MulticastReply, error)
	// 推送广播消息
	Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastReply, error)
}

type gateClient struct {
	cc grpc.ClientConnInterface
}

func NewGateClient(cc grpc.ClientConnInterface) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) Bind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindReply, error) {
	out := new(BindReply)
	err := c.cc.Invoke(ctx, Gate_Bind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Unbind(ctx context.Context, in *UnbindReq, opts ...grpc.CallOption) (*UnbindReply, error) {
	out := new(UnbindReply)
	err := c.cc.Invoke(ctx, Gate_Unbind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GetIP(ctx context.Context, in *GetIPReq, opts ...grpc.CallOption) (*GetIPReply, error) {
	out := new(GetIPReply)
	err := c.cc.Invoke(ctx, Gate_GetIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, Gate_Push_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Multicast(ctx context.Context, in *MulticastReq, opts ...grpc.CallOption) (*MulticastReply, error) {
	out := new(MulticastReply)
	err := c.cc.Invoke(ctx, Gate_Multicast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastReply, error) {
	out := new(BroadcastReply)
	err := c.cc.Invoke(ctx, Gate_Broadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServer is the server API for Gate service.
// All implementations must embed UnimplementedGateServer
// for forward compatibility
type GateServer interface {
	// 绑定用户与连接
	Bind(context.Context, *BindReq) (*BindReply, error)
	// 解绑用户与连接
	Unbind(context.Context, *UnbindReq) (*UnbindReply, error)
	// 获取客户端IP
	GetIP(context.Context, *GetIPReq) (*GetIPReply, error)
	// 推送消息
	Push(context.Context, *PushReq) (*PushReply, error)
	// 推送组消息
	Multicast(context.Context, *MulticastReq) (*MulticastReply, error)
	// 推送广播消息
	Broadcast(context.Context, *BroadcastReq) (*BroadcastReply, error)
	mustEmbedUnimplementedGateServer()
}

// UnimplementedGateServer must be embedded to have forward compatible implementations.
type UnimplementedGateServer struct {
}

func (UnimplementedGateServer) Bind(context.Context, *BindReq) (*BindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedGateServer) Unbind(context.Context, *UnbindReq) (*UnbindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (UnimplementedGateServer) GetIP(context.Context, *GetIPReq) (*GetIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP not implemented")
}
func (UnimplementedGateServer) Push(context.Context, *PushReq) (*PushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedGateServer) Multicast(context.Context, *MulticastReq) (*MulticastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multicast not implemented")
}
func (UnimplementedGateServer) Broadcast(context.Context, *BroadcastReq) (*BroadcastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedGateServer) mustEmbedUnimplementedGateServer() {}

// UnsafeGateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateServer will
// result in compilation errors.
type UnsafeGateServer interface {
	mustEmbedUnimplementedGateServer()
}

func RegisterGateServer(s grpc.ServiceRegistrar, srv GateServer) {
	s.RegisterService(&Gate_ServiceDesc, srv)
}

func _Gate_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Bind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Bind(ctx, req.(*BindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Unbind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Unbind(ctx, req.(*UnbindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_GetIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GetIP(ctx, req.(*GetIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Push(ctx, req.(*PushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Multicast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Multicast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Multicast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Multicast(ctx, req.(*MulticastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Broadcast(ctx, req.(*BroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Gate_ServiceDesc is the grpc.ServiceDesc for Gate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bind",
			Handler:    _Gate_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _Gate_Unbind_Handler,
		},
		{
			MethodName: "GetIP",
			Handler:    _Gate_GetIP_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Gate_Push_Handler,
		},
		{
			MethodName: "Multicast",
			Handler:    _Gate_Multicast_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Gate_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gate.proto",
}
